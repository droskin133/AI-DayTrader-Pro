-- Phase 1: Database Schema (Full SQL, Idempotent)

-- 1.1 Safety & Logging Tables
CREATE TABLE IF NOT EXISTS public.error_logs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  function_name TEXT NOT NULL,
  context JSONB,
  error TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS public.audit_log (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  action TEXT NOT NULL,
  table_name TEXT NOT NULL,
  record_id TEXT NOT NULL,
  actor UUID,
  payload JSONB,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- 1.2 Updated_at Trigger (Supabase best-practice)
CREATE OR REPLACE FUNCTION public.set_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 1.3 Plan Enum & View Fix (resolves prior error)
-- Drop the dependent view first
DROP VIEW IF EXISTS public.current_user_plan;

-- Ensure enum exists
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'plan_t') THEN
    CREATE TYPE public.plan_t AS ENUM ('Free', 'Basic', 'Premium', 'Admin', 'President');
  END IF;
END$$;

-- Ensure table exists
CREATE TABLE IF NOT EXISTS public.user_plans (
  user_id UUID PRIMARY KEY,
  plan TEXT NOT NULL DEFAULT 'Free',
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Safely convert TEXT -> ENUM and set default
ALTER TABLE public.user_plans
  ALTER COLUMN plan DROP DEFAULT,
  ALTER COLUMN plan TYPE public.plan_t USING plan::text::public.plan_t,
  ALTER COLUMN plan SET DEFAULT 'Free'::public.plan_t;

-- Recreate view
CREATE OR REPLACE VIEW public.current_user_plan AS
SELECT u.id AS user_id, p.plan
FROM auth.users u
JOIN public.user_plans p ON p.user_id = u.id;