-- 1.5 Audit Functions + Attach Audit Triggers
CREATE OR REPLACE FUNCTION public.audit_write(
  _action TEXT, _table TEXT, _record TEXT, _actor UUID, _payload JSONB
) RETURNS VOID AS $$
BEGIN
  INSERT INTO public.audit_log (action, table_name, record_id, actor, payload)
  VALUES (_action, _table, _record, _actor, _payload);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER SET search_path = public;

CREATE OR REPLACE FUNCTION public.audit_touch()
RETURNS TRIGGER AS $$
DECLARE actor UUID;
BEGIN
  BEGIN actor := auth.uid(); EXCEPTION WHEN OTHERS THEN actor := NULL; END;
  NEW.updated_at = NOW();
  PERFORM public.audit_write(TG_OP, TG_TABLE_NAME, COALESCE(NEW::text, OLD::text), actor, row_to_json(COALESCE(NEW, OLD)));
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER SET search_path = public;

DROP TRIGGER IF EXISTS trg_audit_alerts ON public.alerts;
CREATE TRIGGER trg_audit_alerts AFTER INSERT OR UPDATE OR DELETE ON public.alerts
FOR EACH ROW EXECUTE FUNCTION public.audit_touch();

DROP TRIGGER IF EXISTS trg_audit_watchlists ON public.watchlists;
CREATE TRIGGER trg_audit_watchlists AFTER INSERT OR UPDATE OR DELETE ON public.watchlists
FOR EACH ROW EXECUTE FUNCTION public.audit_touch();

DROP TRIGGER IF EXISTS trg_audit_ai_learning_log ON public.ai_learning_log;
CREATE TRIGGER trg_audit_ai_learning_log AFTER INSERT OR UPDATE OR DELETE ON public.ai_learning_log
FOR EACH ROW EXECUTE FUNCTION public.audit_touch();

DROP TRIGGER IF EXISTS trg_audit_ai_feedback ON public.ai_feedback;
CREATE TRIGGER trg_audit_ai_feedback AFTER INSERT OR UPDATE OR DELETE ON public.ai_feedback
FOR EACH ROW EXECUTE FUNCTION public.audit_touch();

-- 1.6 Market/Reference Tables (ensure present)
CREATE TABLE IF NOT EXISTS public.sec_filings (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  symbol TEXT NOT NULL,
  form TEXT NOT NULL,
  filed_at TIMESTAMPTZ NOT NULL,
  url TEXT
);

CREATE TABLE IF NOT EXISTS public.insider_transactions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  symbol TEXT NOT NULL,
  officer TEXT,
  transaction_type TEXT,
  shares NUMERIC,
  price NUMERIC,
  amount NUMERIC,
  filed_at TIMESTAMPTZ
);

CREATE TABLE IF NOT EXISTS public.institutional_ownership (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  symbol TEXT NOT NULL,
  owner TEXT,
  pct NUMERIC,
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS public.analyst_targets (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  symbol TEXT NOT NULL,
  target_avg NUMERIC,
  target_high NUMERIC,
  target_low NUMERIC,
  as_of_date DATE
);

CREATE TABLE IF NOT EXISTS public.earnings_calendar (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  symbol TEXT NOT NULL,
  event_date DATE NOT NULL,
  event_type TEXT CHECK (event_type IN ('EARNINGS','DIVIDEND','SPLIT'))
);