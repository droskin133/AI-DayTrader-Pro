-- 1.4 Base Domain Tables (create if missing) + Triggers
-- Alerts
CREATE TABLE IF NOT EXISTS public.alerts (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL,
  symbol TEXT NOT NULL,
  rule JSONB NOT NULL,           -- natural language parsed condition
  active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
DROP TRIGGER IF EXISTS trg_set_updated_alerts ON public.alerts;
CREATE TRIGGER trg_set_updated_alerts BEFORE UPDATE ON public.alerts
FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();

-- Watchlists
CREATE TABLE IF NOT EXISTS public.watchlists (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL,
  symbol TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
DROP TRIGGER IF EXISTS trg_set_updated_watchlists ON public.watchlists;
CREATE TRIGGER trg_set_updated_watchlists BEFORE UPDATE ON public.watchlists
FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();

-- AI Learning Log
CREATE TABLE IF NOT EXISTS public.ai_learning_log (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID,
  symbol TEXT,
  context JSONB,                 -- technicals, news sentiment, filings, insider/institutional
  analysis JSONB,                -- model output
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
DROP TRIGGER IF EXISTS trg_set_updated_ai_learning_log ON public.ai_learning_log;
CREATE TRIGGER trg_set_updated_ai_learning_log BEFORE UPDATE ON public.ai_learning_log
FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();

-- AI Feedback
CREATE TABLE IF NOT EXISTS public.ai_feedback (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL,
  ai_log_id BIGINT REFERENCES public.ai_learning_log(id) ON DELETE CASCADE,
  helpful BOOLEAN,
  notes TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
DROP TRIGGER IF EXISTS trg_set_updated_ai_feedback ON public.ai_feedback;
CREATE TRIGGER trg_set_updated_ai_feedback BEFORE UPDATE ON public.ai_feedback
FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();